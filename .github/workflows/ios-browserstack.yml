name: Build and test iOS Sample App on Browserstack
on: pull_request

jobs:
  run-ios-browserstack:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2.2"
          bundler-cache: true
      - run: brew install xcodesorg/made/xcodes
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          BUILD_PROVISION_EXTENSION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_EXTENSION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_1_PATH=$RUNNER_TEMP/build_pp_1.mobileprovision
          PP_2_PATH=$RUNNER_TEMP/build_pp_2.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_1_PATH
          echo -n "$BUILD_PROVISION_EXTENSION_PROFILE_BASE64" | base64 --decode -o $PP_2_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_1_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_2_PATH ~/Library/MobileDevice/Provisioning\ Profiles

          # create plist
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH

      - name: fastlane build swift-sample-app
        run: bundle exec fastlane build_for_browserstack plist:$RUNNER_TEMP/ExportOptions.plist

      - name: upload swift-sample-app .ipa to browserstack
        id: upload_ipa
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/app"
          method: "POST"
          username: ${{ secrets.BROWSERSTACK_USERNAME }}
          password: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          files: '{ "file": "${{ github.workspace }}/build-swift-sample-app/swift-sample-app.ipa", "custom_id": "swift-sample-app" }'

      - name: get browserstack app_url
        id: get_app_url
        run: |
          bs_app_url=${{ fromJson(steps.upload_ipa.outputs.response).app_url }}
          echo "::set-output name=app_url::$bs_app_url"

      - name: upload test suite .zip to browserstack
        id: upload_test_zip
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/test-suite"
          method: "POST"
          username: ${{ secrets.BROWSERSTACK_USERNAME }}
          password: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          files: '{ "file": "${{ github.workspace }}/build-swift-sample-app/swift-sample-app-ui-test.zip", "custom_id": "swift-sample-app-ui-test" }'

      - name: get browserstack test_suite_url
        id: get_test_suite_url
        run: |
          bs_test_suite_url=${{ fromJson(steps.upload_test_zip.outputs.response).test_suite_url }}
          echo "::set-output name=test_suite_url::$bs_test_suite_url"

      - name: execute test suite on browserstack
        uses: fjogeleit/http-request-action@v1
        with:
          url: "https://api-cloud.browserstack.com/app-automate/xcuitest/v2/build"
          method: "POST"
          username: "justinyu_cIqvyB"
          password: "TszLVeLKEjzwXpVUSB48"
          data: "${{ steps.get_app_url.app_url }},${{ steps.get_test_suite_url.test_suite_url }}"
          file: "${{ github.workspace }}/build-swift-sample-app/swift-sample-app-ui-test.zip"
          customHeaders: '{"Content-Type": "application/json"}'
