name: Build and test

on: pull_request

jobs:
  run-tests-job:
    runs-on: macos-15

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: latest-stable

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Setup Ruby and xcpretty
        run: |
          gem install erb
          gem install xcpretty

      - name: Print available simulators
        run: xcrun simctl list devices | cat

      - name: Build and test
        run: |
          xcodebuild test -project swift-sdk.xcodeproj -scheme swift-sdk -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' -enableCodeCoverage YES -resultBundlePath TestResults.xcresult CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}
 
      - name: Process test results
        run: |
          # Process XCResult into HTML files
          python scripts/process_xcresult.py --path TestResults.xcresult --output test-results.html
          
          # Split the HTML into summary and details for GitHub Checks
          # First 10000 chars for summary, rest for details (just an example approach)
          cat test-results.html | head -c 10000 > report-summary.html
          cat test-results.html > report-detail.html
          
          # Create a simple markdown summary for the job summary
          echo "# Test Results Summary" > report-summary.md
          echo "Test run completed. See GitHub Checks for full HTML report." >> report-summary.md
          
          # Extract test statistics
          echo "## Test Statistics" >> report-summary.md
          
          # Count table rows with test IDs as proxy for total tests
          TOTAL_TESTS=$(grep -c "<tr id=" test-results.html)
          echo "* Total Tests: $TOTAL_TESTS" >> report-summary.md
          
          # Count passed tests (using checkmark emoji)
          PASSED_TESTS=$(grep -c "✅" test-results.html)
          echo "* Tests Passed: $PASSED_TESTS" >> report-summary.md
          
          # Assume rest are failed (though likely zero in your case)
          FAILED_TESTS=$(( $TOTAL_TESTS - $PASSED_TESTS ))
          echo "* Tests Failed: $FAILED_TESTS" >> report-summary.md
          
          # Calculate success rate
          if [ $TOTAL_TESTS -gt 0 ]; then
            SUCCESS_RATE=$(( $PASSED_TESTS * 100 / $TOTAL_TESTS ))
            echo "* Success Rate: ${SUCCESS_RATE}%" >> report-summary.md
          fi
          
          # Include a link to the full report
          echo "" >> report-summary.md
          echo "For complete details, see the Check Run or download the test-results artifact." >> report-summary.md
        if: success() || failure()

      - name: Create Test Report Check
        uses: actions/github-script@v7
        if: success() || failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get PR information or commit SHA
            const pr = context.payload.pull_request;
            const sha = pr.head.sha;
            
            // Read the generated HTML
            let reportSummary = fs.readFileSync('report-summary.html', 'utf8');
            let reportDetail = fs.readFileSync('report-detail.html', 'utf8');
            
            // GitHub Checks has a character limit of 65535
            const charactersLimit = 65535;
            
            if (reportSummary.length > charactersLimit) {
              console.warn(`Summary will be truncated (exceeded ${charactersLimit} characters)`);
              reportSummary = reportSummary.substring(0, charactersLimit);
            }
            
            if (reportDetail.length > charactersLimit) {
              console.warn(`Detail will be truncated (exceeded ${charactersLimit} characters)`);
              reportDetail = reportDetail.substring(0, charactersLimit);
            }
            
            // Determine conclusion based on test results
            // Count failed tests using same method as in process test results step
            const totalTests = parseInt(
              require('child_process').execSync('grep -c "<tr id=" test-results.html').toString().trim() || '0'
            );
            const passedTests = parseInt(
              require('child_process').execSync('grep -c "✅" test-results.html').toString().trim() || '0'
            );
            const failedTests = totalTests - passedTests;
            
            // Set conclusion based on failed tests count
            const conclusion = failedTests > 0 ? 'failure' : 'success';
            
            // Create the check
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Xcode Test Results',
              head_sha: sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: `Xcode Test Results: ${passedTests}/${totalTests} tests passed`,
                summary: reportSummary,
                text: reportDetail
              }
            });

      - name: Add to Job Summary
        run: cat report-summary.md >> $GITHUB_STEP_SUMMARY
        if: success() || failure()

      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.html
        if: success() || failure()

      - name: CocoaPods lint
        run: pod lib lint --allow-warnings

      - name: Upload coverage report to codecov.io
        run: bash <(curl -s https://codecov.io/bash) -X gcov -J 'IterableSDK' -J 'IterableAppExtensions'
