name: Build and test

on: pull_request

jobs:
  run-tests-job:
    runs-on: macos-15

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: latest-stable

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Setup Ruby and xcpretty
        run: |
          gem install erb
          gem install xcpretty
          brew install jq

      - name: Print available simulators
        run: xcrun simctl list devices | cat

      - name: Build and test
        run: |
          xcodebuild test -project swift-sdk.xcodeproj -scheme swift-sdk -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' -enableCodeCoverage YES -resultBundlePath TestResults.xcresult CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}
 
      - name: Process test results
        run: |
          python3 scripts/process_xcresult.py --path TestResults.xcresult --test-output test-results.html --coverage-output coverage-results.html --summary-json test-summary.json
        if: success() || failure()

      - name: Create Test Report Check
        uses: actions/github-script@v7
        if: success() || failure()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const reportDir = '.';
            const testType = 'Unit Tests';
            
            // Get PR information or commit SHA
            const pr = context.payload.pull_request;
            const sha = pr && pr.head.sha ? pr.head.sha : context.sha;
            
            // Read the generated HTML files
            let testReportHtml = "";
            let coverageReportHtml = "";
            
            try {
              testReportHtml = fs.readFileSync(`${reportDir}/test-results.html`, 'utf8');
              
              try {
                coverageReportHtml = fs.readFileSync(`${reportDir}/coverage-results.html`, 'utf8');
              } catch (error) {
                core.warning(`No coverage report found: ${error.message}`);
              }
              
              // Generate markdown summary for GitHub
              let summaryMarkdown = `# ${testType} Results\n\n`;
              
              // Read test statistics from JSON summary
              let testStats;
              try {
                const summaryJson = fs.readFileSync(`${reportDir}/test-summary.json`, 'utf8');
                testStats = JSON.parse(summaryJson);
                
                // Add test statistics to summary
                summaryMarkdown += `- **Total Tests**: ${testStats.total_tests}\n`;
                summaryMarkdown += `- **Passed**: ${testStats.passed_tests}\n`;
                summaryMarkdown += `- **Failed**: ${testStats.failed_tests}\n`;
                if (testStats.skipped_tests) {
                  summaryMarkdown += `- **Skipped**: ${testStats.skipped_tests}\n`;
                }
                summaryMarkdown += `- **Success Rate**: ${typeof testStats.success_rate === 'number' ? testStats.success_rate.toFixed(1) : parseFloat(testStats.success_rate).toFixed(1)}%\n\n`;
                
              } catch (error) {
                core.warning(`Error reading test summary JSON: ${error.message}`);
                // Fallback to zero values
                testStats = {
                  total_tests: 0,
                  passed_tests: 0,
                  failed_tests: 0,
                  success_rate: 0
                };
                
                summaryMarkdown += "Failed to load test statistics.\n\n";
              }
              
              // Write summary markdown to file
              fs.writeFileSync(`${reportDir}/report-summary.md`, summaryMarkdown);
              
            } catch (error) {
              core.error(`Error reading report files: ${error.message}`);
              throw error;
            }
            
            // GitHub Checks has a character limit of 65535
            const charactersLimit = 65535;
            
            // Use test report as summary
            const reportSummary = testReportHtml.substring(0, charactersLimit);
            
            // Use coverage report as detail, falling back to test report if coverage isn't available
            const reportDetail = coverageReportHtml 
              ? coverageReportHtml.substring(0, charactersLimit) 
              : reportSummary;
            
            // Set conclusion based on failed tests count
            const conclusion = testStats.failed_tests > 0 ? 'failure' : 'success';
            
            // Format the success rate to 1 decimal place
            const successRate = typeof testStats.success_rate === 'number' 
              ? testStats.success_rate.toFixed(1) 
              : parseFloat(testStats.success_rate).toFixed(1);
            
            // Create the check
            try {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: `${testType} Results`,
                head_sha: sha,
                status: 'completed',
                conclusion: conclusion,
                output: {
                  title: `${testType} Results: ${testStats.passed_tests}/${testStats.total_tests} tests passed (${successRate}%)`,
                  summary: reportSummary,
                  text: reportDetail
                }
              });
              
              core.info(`Created GitHub Check for ${testType} with ${testStats.passed_tests}/${testStats.total_tests} tests passed (${successRate}%)`);
            } catch (error) {
              core.error(`Error creating GitHub Check: ${error.message}`);
              throw error;
            }

      - name: Add to Job Summary
        run: cat report-summary.md >> $GITHUB_STEP_SUMMARY
        if: success() || failure()
        
      - name: Upload test results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: |
            test-results.html
            coverage-results.html
            report-summary.md
            test-summary.json
        if: success() || failure()

      - name: CocoaPods lint
        run: pod lib lint --allow-warnings

      - name: Upload coverage report to codecov.io
        run: bash <(curl -s https://codecov.io/bash) -X gcov -J 'IterableSDK' -J 'IterableAppExtensions'
