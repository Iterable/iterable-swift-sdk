name: Embedded Message Integration Test

on:
  workflow_call:
    inputs:
      simulator_uuid:
        required: true
        type: string
      derived_data_path:
        required: false
        type: string
        default: './DerivedData'
    secrets:
      ITERABLE_API_KEY:
        required: true
      ITERABLE_SERVER_KEY:
        required: true
      TEST_PROJECT_ID:
        required: true
      TEST_USER_EMAIL:
        required: true

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  ITERABLE_API_KEY: ${{ secrets.ITERABLE_API_KEY }}
  ITERABLE_SERVER_KEY: ${{ secrets.ITERABLE_SERVER_KEY }}
  TEST_PROJECT_ID: ${{ secrets.TEST_PROJECT_ID }}
  TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
  SIMULATOR_UUID: ${{ inputs.simulator_uuid }}

jobs:
  embedded-message-integration:
    name: Embedded Message Integration
    runs-on: macos-14
    timeout-minutes: 25
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Validate Environment
      run: |
        echo "🔍 Validating embedded message test environment..."
        echo "API Key Length: ${#ITERABLE_API_KEY}"
        echo "Server Key Length: ${#ITERABLE_SERVER_KEY}"
        echo "Test Project ID: $TEST_PROJECT_ID"
        echo "Test User Email: $TEST_USER_EMAIL"
        echo "Simulator UUID: $SIMULATOR_UUID"
        
        # Verify simulator exists and is booted
        xcrun simctl list devices | grep "$SIMULATOR_UUID" || {
          echo "❌ Simulator $SIMULATOR_UUID not found"
          exit 1
        }

    - name: Setup Backend API Client
      run: |
        echo "🌐 Setting up backend API client for embedded message testing..."
        
        # Create API client configuration
        cat > /tmp/embedded-api-config.json << EOF
        {
          "apiKey": "$ITERABLE_API_KEY",
          "serverKey": "$ITERABLE_SERVER_KEY",
          "projectId": "$TEST_PROJECT_ID",
          "userEmail": "$TEST_USER_EMAIL",
          "baseUrl": "https://api.iterable.com",
          "listName": "embedded-message-test-list"
        }
        EOF

    - name: Create User List for Embedded Messages
      run: |
        echo "📝 Creating user list for embedded message eligibility testing..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Create a new list for embedded message testing
        list_payload = {
            "name": f"{config['listName']}-{int(time.time())}",
            "description": "List for embedded message integration testing",
            "publicIdString": f"embedded-test-{int(time.time())}",
            "listType": "Standard"
        }
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/lists",
                headers=headers,
                json=list_payload,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                list_data = response.json()
                list_id = list_data.get('id')
                print(f"✅ User list created for embedded messages: {list_id}")
                
                # Save list ID for later use
                with open('/tmp/list-id.txt', 'w') as f:
                    f.write(str(list_id))
                    
                # Update config with actual list ID
                config['listId'] = list_id
                with open('/tmp/embedded-api-config.json', 'w') as f:
                    json.dump(config, f)
            else:
                print(f"❌ Failed to create user list: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error creating user list: {str(e)}")
            exit(1)
        EOF

    - name: Set User as Initially Ineligible
      run: |
        echo "❌ Setting user as initially ineligible for embedded messages..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Update user profile to be ineligible (not on the list)
        user_profile = {
            "email": config['userEmail'],
            "dataFields": {
                "embeddedMessageEligible": False,
                "testUserType": "integration_test",
                "lastUpdated": str(int(time.time()))
            },
            "preferUserId": False
        }
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/users/update",
                headers=headers,
                json=user_profile,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ User set as initially ineligible for embedded messages")
            else:
                print(f"❌ Failed to update user profile: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error updating user profile: {str(e)}")
            exit(1)
        EOF

    - name: Create Embedded Message Campaign
      run: |
        echo "📝 Creating embedded message campaign with eligibility rules..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Load list ID
        try:
            with open('/tmp/list-id.txt', 'r') as f:
                list_id = int(f.read().strip())
        except:
            list_id = config.get('listId', 1)
        
        # Create embedded message campaign
        campaign_payload = {
            "name": f"Integration Test Embedded - {int(time.time())}",
            "listIds": [list_id],
            "segmentationListId": list_id,
            "suppressionListIds": [],
            "sendAt": "immediate",
            "sendMode": "immediate",
            "timezone": "America/Los_Angeles",
            "campaignState": "Ready",
            "messageMedium": "Embedded",
            "messageTypeId": 3,
            "template": {
                "placementId": "embedded-test-placement",
                "content": {
                    "type": "banner",
                    "backgroundColor": "#FF6B35",
                    "textColor": "#FFFFFF",
                    "title": "Special Offer!",
                    "body": "Get 20% off your next purchase. Limited time only!",
                    "buttonText": "Shop Now",
                    "buttonAction": {
                        "type": "openUrl",
                        "data": "https://links.iterable.com/u/click?_t=embedded-test&_m=integration"
                    },
                    "dismissAction": {
                        "type": "dismiss"
                    }
                },
                "displaySettings": {
                    "position": "top",
                    "animationType": "slideDown",
                    "duration": 0,
                    "autoHide": False
                }
            },
            "metadata": {
                "source": "github-actions",
                "test": "embedded-message-integration",
                "placementId": "embedded-test-placement"
            }
        }
        
        headers = {
            'Api-Key': config['serverKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/campaigns/create",
                headers=headers,
                json=campaign_payload,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                campaign_data = response.json()
                campaign_id = campaign_data.get('campaignId')
                print(f"✅ Embedded message campaign created: {campaign_id}")
                
                # Save campaign ID for later use
                with open('/tmp/embedded-campaign-id.txt', 'w') as f:
                    f.write(str(campaign_id))
            else:
                print(f"❌ Failed to create embedded campaign: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error creating embedded campaign: {str(e)}")
            exit(1)
        EOF

    - name: Test Initial Ineligible State
      run: |
        echo "🚀 Testing initial ineligible state for embedded messages..."
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan EmbeddedMessageIneligibleTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-embedded-ineligible.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Make User Eligible for Embedded Messages
      run: |
        echo "✅ Making user eligible for embedded messages..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Load list ID
        try:
            with open('/tmp/list-id.txt', 'r') as f:
                list_id = int(f.read().strip())
        except:
            list_id = config.get('listId', 1)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        # Add user to the list
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/lists/subscribe",
                headers=headers,
                json={
                    "listId": list_id,
                    "subscribers": [
                        {
                            "email": config['userEmail'],
                            "dataFields": {
                                "embeddedMessageEligible": True,
                                "eligibilityChanged": str(int(time.time()))
                            }
                        }
                    ]
                },
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ User added to embedded message eligibility list")
            else:
                print(f"❌ Failed to add user to list: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error adding user to list: {str(e)}")
            exit(1)
        
        # Update user profile
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/users/update",
                headers=headers,
                json={
                    "email": config['userEmail'],
                    "dataFields": {
                        "embeddedMessageEligible": True,
                        "eligibilityChanged": str(int(time.time()))
                    }
                },
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ User profile updated for embedded message eligibility")
            else:
                print(f"⚠️ Warning: Profile update returned {response.status_code}")
                
        except Exception as e:
            print(f"⚠️ Warning: Error updating profile: {str(e)}")
        EOF

    - name: Send Silent Push to Trigger Embedded Message Update
      run: |
        echo "📨 Sending silent push to trigger embedded message update..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Load campaign ID
        try:
            with open('/tmp/embedded-campaign-id.txt', 'r') as f:
                campaign_id = f.read().strip()
        except:
            campaign_id = "67890"  # Fallback
        
        # Silent push payload to trigger embedded message sync
        silent_push_payload = {
            "recipientEmail": config['userEmail'],
            "campaignId": int(campaign_id),
            "dataFields": {
                "silentPush": True,
                "triggerEmbedded": True,
                "embeddedSync": True,
                "eligibilityUpdated": True,
                "timestamp": str(int(time.time()))
            },
            "sendAt": "immediate",
            "allowRepeatMarketingCampaigns": True,
            "metadata": {
                "source": "github-actions",
                "test": "embedded-silent-push",
                "purpose": "trigger-embedded-sync"
            },
            "pushPayload": {
                "contentAvailable": True,
                "isGhostPush": True,
                "badge": None,
                "sound": None,
                "body": None,
                "title": None
            }
        }
        
        headers = {
            'Api-Key': config['serverKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/push/target",
                headers=headers,
                json=silent_push_payload,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ Silent push sent to trigger embedded message sync")
                print(f"Message ID: {response.json().get('messageId', 'unknown')}")
            else:
                print(f"❌ Failed to send silent push: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error sending silent push: {str(e)}")
            exit(1)
        EOF

    - name: Test Embedded Message Display After Eligibility Change
      run: |
        echo "📱 Testing embedded message display after eligibility change..."
        
        # Wait for silent push to be processed and embedded messages to sync
        sleep 20
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan EmbeddedMessageEligibleTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-embedded-eligible.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Test Embedded Message Interactions
      run: |
        echo "👆 Testing embedded message interactions and buttons..."
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan EmbeddedMessageInteractionTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-embedded-interaction.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Test Profile Toggle Functionality
      run: |
        echo "🔄 Testing user profile toggle affecting embedded message eligibility..."
        
        # Remove user from eligibility list
        python3 - << 'EOF'
        import json
        import requests
        import os
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        # Load list ID
        try:
            with open('/tmp/list-id.txt', 'r') as f:
                list_id = int(f.read().strip())
        except:
            list_id = config.get('listId', 1)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/lists/unsubscribe",
                headers=headers,
                json={
                    "listId": list_id,
                    "subscribers": [
                        {
                            "email": config['userEmail']
                        }
                    ]
                },
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ User removed from embedded message eligibility list")
            else:
                print(f"⚠️ Warning: Unsubscribe returned {response.status_code}")
                
        except Exception as e:
            print(f"⚠️ Warning: Error removing user from list: {str(e)}")
        EOF
        
        # Test that embedded messages are removed
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan EmbeddedMessageProfileToggleTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-embedded-toggle.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Validate Embedded Message Metrics
      run: |
        echo "📊 Validating embedded message metrics in backend..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        import sys
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        # Check for embedded message events in the last 20 minutes
        end_time = int(time.time())
        start_time = end_time - 1200  # 20 minutes ago
        
        expected_events = ['embeddedMessageReceived', 'embeddedClick', 'embeddedMessageImpression']
        
        for attempt in range(4):
            try:
                response = requests.get(
                    f"{config['baseUrl']}/api/events/get",
                    headers=headers,
                    params={
                        'email': config['userEmail'],
                        'startDateTime': start_time,
                        'endDateTime': end_time
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    events = response.json().get('events', [])
                    embedded_events = [e for e in events if e.get('eventName') in expected_events]
                    
                    if len(embedded_events) >= 1:  # At least one embedded event
                        print(f"✅ Embedded message metrics validated: {len(embedded_events)} events found")
                        for event in embedded_events:
                            print(f"  - {event.get('eventName')} at {event.get('createdAt')}")
                        sys.exit(0)
                    else:
                        print(f"⚠️ Attempt {attempt + 1}: Found {len(embedded_events)} events, need at least 1")
                        if embedded_events:
                            for event in embedded_events:
                                print(f"  - {event.get('eventName')}")
                else:
                    print(f"⚠️ Attempt {attempt + 1}: API returned {response.status_code}")
                    
            except Exception as e:
                print(f"⚠️ Attempt {attempt + 1}: {str(e)}")
            
            if attempt < 3:
                time.sleep(25)
        
        print("❌ Embedded message metrics validation failed - insufficient events")
        # Don't fail the build for metrics validation in embedded messages
        sys.exit(0)
        EOF

    - name: Generate Test Reports
      if: always()
      run: |
        echo "📋 Generating comprehensive embedded message test reports..."
        
        mkdir -p test-reports/embedded
        
        # Extract test results from each test run
        for result_bundle in ./test-results-embedded*.xcresult; do
          if [ -f "$result_bundle" ]; then
            bundle_name=$(basename "$result_bundle" .xcresult)
            xcrun xcresulttool get --format json --path "$result_bundle" > "test-reports/embedded/${bundle_name}.json"
            
            # Extract summary information
            echo "Results from $bundle_name:" >> test-reports/embedded/summary.txt
            xcrun xcresulttool get --format json --path "$result_bundle" | \
              jq -r '.actions[0].actionResult.status' >> test-reports/embedded/summary.txt
            echo "" >> test-reports/embedded/summary.txt
          fi
        done
        
        # Create final summary
        cat > test-reports/embedded/final-summary.json << EOF
        {
          "test_suite": "embedded-messages",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": {
            "simulator_uuid": "$SIMULATOR_UUID",
            "project_id": "$TEST_PROJECT_ID",
            "user_email": "$TEST_USER_EMAIL"
          },
          "features_tested": [
            "user_eligibility_rules",
            "silent_push_trigger",
            "message_display_after_eligibility",
            "user_interactions",
            "profile_toggle_functionality",
            "metrics_tracking"
          ],
          "status": "completed"
        }
        EOF

    - name: Capture Screenshots
      if: always()
      run: |
        echo "📸 Capturing embedded message test screenshots..."
        
        mkdir -p test-reports/embedded/screenshots
        
        # Capture current app state
        xcrun simctl io $SIMULATOR_UUID screenshot test-reports/embedded/screenshots/final-state.png

    - name: Cleanup Test Data
      if: always()
      run: |
        echo "🧹 Cleaning up embedded message test data..."
        
        # Remove test campaigns, lists, and user data
        python3 - << 'EOF'
        import json
        import requests
        import os
        
        # Load configuration
        with open('/tmp/embedded-api-config.json', 'r') as f:
            config = json.load(f)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            # Delete campaign if campaign ID exists
            if os.path.exists('/tmp/embedded-campaign-id.txt'):
                with open('/tmp/embedded-campaign-id.txt', 'r') as f:
                    campaign_id = f.read().strip()
                
                response = requests.delete(
                    f"{config['baseUrl']}/api/campaigns/{campaign_id}",
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code in [200, 204, 404]:
                    print("✅ Test campaign cleaned up")
                else:
                    print(f"⚠️ Campaign cleanup warning: {response.status_code}")
            
            # Delete list if list ID exists
            if os.path.exists('/tmp/list-id.txt'):
                with open('/tmp/list-id.txt', 'r') as f:
                    list_id = f.read().strip()
                
                response = requests.delete(
                    f"{config['baseUrl']}/api/lists/{list_id}",
                    headers=headers,
                    timeout=30
                )
                
                if response.status_code in [200, 204, 404]:
                    print("✅ Test list cleaned up")
                else:
                    print(f"⚠️ List cleanup warning: {response.status_code}")
                
        except Exception as e:
            print(f"⚠️ Cleanup warning: {str(e)}")
        EOF
        
        # Clean up temporary files
        rm -f /tmp/embedded-api-config.json
        rm -f /tmp/embedded-campaign-id.txt
        rm -f /tmp/list-id.txt

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: embedded-message-detailed-results
        path: |
          test-reports/embedded/
          ./test-results-embedded*.xcresult
        retention-days: 7

    - name: Validate Test Success
      run: |
        echo "🎯 Validating overall embedded message test success..."
        
        # Check if all critical test files exist
        required_files=(
          "test-reports/embedded/final-summary.json"
          "test-reports/embedded/summary.txt"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required test output missing: $file"
            exit 1
          fi
        done
        
        echo "✅ Embedded message integration tests completed successfully"