name: Push Notification Integration Test

on:
  workflow_call:
    inputs:
      simulator_uuid:
        required: true
        type: string
      derived_data_path:
        required: false
        type: string
        default: './DerivedData'
    secrets:
      ITERABLE_API_KEY:
        required: true
      ITERABLE_SERVER_KEY:
        required: true
      TEST_PROJECT_ID:
        required: true
      TEST_USER_EMAIL:
        required: true
      APNS_CERTIFICATE:
        required: true

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
  ITERABLE_API_KEY: ${{ secrets.ITERABLE_API_KEY }}
  ITERABLE_SERVER_KEY: ${{ secrets.ITERABLE_SERVER_KEY }}
  TEST_PROJECT_ID: ${{ secrets.TEST_PROJECT_ID }}
  TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
  APNS_CERTIFICATE: ${{ secrets.APNS_CERTIFICATE }}
  SIMULATOR_UUID: ${{ inputs.simulator_uuid }}

jobs:
  push-notification-integration:
    name: Push Notification Integration
    runs-on: macos-14
    timeout-minutes: 25
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Validate Environment
      run: |
        echo "🔍 Validating test environment..."
        echo "API Key Length: ${#ITERABLE_API_KEY}"
        echo "Server Key Length: ${#ITERABLE_SERVER_KEY}"
        echo "Test Project ID: $TEST_PROJECT_ID"
        echo "Test User Email: $TEST_USER_EMAIL"
        echo "Simulator UUID: $SIMULATOR_UUID"
        
        # Verify simulator exists and is booted
        xcrun simctl list devices | grep "$SIMULATOR_UUID" || {
          echo "❌ Simulator $SIMULATOR_UUID not found"
          exit 1
        }

    - name: Install APNs Certificate
      run: |
        echo "🔐 Installing APNs certificate for push notifications..."
        
        # Decode and install certificate
        echo "$APNS_CERTIFICATE" | base64 -d > /tmp/apns-cert.p12
        
        # Create keychain for certificate
        security create-keychain -p test-password push-test-keychain
        security unlock-keychain -p test-password push-test-keychain
        security set-keychain-settings -t 3600 -l push-test-keychain
        
        # Import certificate
        security import /tmp/apns-cert.p12 \
          -k push-test-keychain \
          -P "" \
          -T /usr/bin/codesign \
          -T /usr/bin/security
        
        # Set keychain search list
        security list-keychains -s push-test-keychain login.keychain
        
        # Verify certificate installation
        security find-identity -v -p codesigning push-test-keychain
        
        # Clean up certificate file
        rm -f /tmp/apns-cert.p12

    - name: Setup Backend API Client
      run: |
        echo "🌐 Setting up backend API client for validation..."
        
        # Create API client configuration
        cat > /tmp/api-config.json << EOF
        {
          "apiKey": "$ITERABLE_API_KEY",
          "serverKey": "$ITERABLE_SERVER_KEY",
          "projectId": "$TEST_PROJECT_ID",
          "userEmail": "$TEST_USER_EMAIL",
          "baseUrl": "https://api.iterable.com"
        }
        EOF

    - name: Prepare Test Device
      run: |
        echo "📱 Preparing simulator for push notification tests..."
        
        # Reset notification permissions
        xcrun simctl privacy $SIMULATOR_UUID reset notifications || true
        
        # Ensure simulator is ready
        xcrun simctl bootstatus $SIMULATOR_UUID -b
        
        # Take initial screenshot
        xcrun simctl io $SIMULATOR_UUID screenshot /tmp/initial-state.png

    - name: Run Device Registration Test
      run: |
        echo "🚀 Testing device registration workflow..."
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan PushDeviceRegistrationTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-device-registration.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Validate Device Registration
      run: |
        echo "✅ Validating device registration in backend..."
        
        # Use Python script to validate device registration
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        import sys
        
        # Load configuration
        with open('/tmp/api-config.json', 'r') as f:
            config = json.load(f)
        
        # Check device registration
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        # Retry device registration check
        for attempt in range(5):
            try:
                response = requests.get(
                    f"{config['baseUrl']}/api/users/getByEmail",
                    headers=headers,
                    params={'email': config['userEmail']},
                    timeout=30
                )
                
                if response.status_code == 200:
                    user_data = response.json()
                    device_count = len(user_data.get('user', {}).get('devices', []))
                    print(f"✅ Device registration validated: {device_count} devices found")
                    sys.exit(0)
                else:
                    print(f"⚠️ Attempt {attempt + 1}: API returned {response.status_code}")
                    
            except Exception as e:
                print(f"⚠️ Attempt {attempt + 1}: {str(e)}")
            
            if attempt < 4:
                time.sleep(10)
        
        print("❌ Device registration validation failed")
        sys.exit(1)
        EOF

    - name: Send Test Push Notification
      run: |
        echo "📨 Sending test push notification..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        
        # Load configuration
        with open('/tmp/api-config.json', 'r') as f:
            config = json.load(f)
        
        # Push notification payload
        payload = {
            "recipientEmail": config['userEmail'],
            "campaignId": 12345,
            "dataFields": {
                "testType": "integration",
                "timestamp": str(int(time.time()))
            },
            "sendAt": "immediate",
            "allowRepeatMarketingCampaigns": True,
            "metadata": {
                "source": "github-actions",
                "test": "push-notification-integration"
            }
        }
        
        headers = {
            'Api-Key': config['serverKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            response = requests.post(
                f"{config['baseUrl']}/api/campaigns/create",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code in [200, 201]:
                print("✅ Test push notification sent successfully")
                print(f"Campaign ID: {response.json().get('campaignId', 'unknown')}")
            else:
                print(f"❌ Failed to send push notification: {response.status_code}")
                print(f"Response: {response.text}")
                exit(1)
                
        except Exception as e:
            print(f"❌ Error sending push notification: {str(e)}")
            exit(1)
        EOF

    - name: Run Push Notification Reception Test
      run: |
        echo "📲 Testing push notification reception and handling..."
        
        # Wait for push to be delivered
        sleep 10
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan PushNotificationReceptionTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-push-reception.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Test Push Interaction and Deep Links
      run: |
        echo "👆 Testing push notification interactions and deep links..."
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan PushInteractionTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-push-interaction.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Validate Push Metrics
      run: |
        echo "📊 Validating push notification metrics in backend..."
        
        python3 - << 'EOF'
        import json
        import requests
        import os
        import time
        import sys
        
        # Load configuration
        with open('/tmp/api-config.json', 'r') as f:
            config = json.load(f)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        # Check for push events in the last 10 minutes
        end_time = int(time.time())
        start_time = end_time - 600  # 10 minutes ago
        
        for attempt in range(3):
            try:
                response = requests.get(
                    f"{config['baseUrl']}/api/events/get",
                    headers=headers,
                    params={
                        'email': config['userEmail'],
                        'startDateTime': start_time,
                        'endDateTime': end_time
                    },
                    timeout=30
                )
                
                if response.status_code == 200:
                    events = response.json().get('events', [])
                    push_events = [e for e in events if e.get('eventName') in ['pushSend', 'pushOpen', 'pushBounce']]
                    
                    if push_events:
                        print(f"✅ Push metrics validated: {len(push_events)} events found")
                        for event in push_events:
                            print(f"  - {event.get('eventName')} at {event.get('createdAt')}")
                        sys.exit(0)
                    else:
                        print(f"⚠️ Attempt {attempt + 1}: No push events found yet")
                else:
                    print(f"⚠️ Attempt {attempt + 1}: API returned {response.status_code}")
                    
            except Exception as e:
                print(f"⚠️ Attempt {attempt + 1}: {str(e)}")
            
            if attempt < 2:
                time.sleep(15)
        
        print("❌ Push metrics validation failed - no events found")
        sys.exit(1)
        EOF

    - name: Test Background Push Handling
      run: |
        echo "🔄 Testing background push notification handling..."
        
        xcodebuild test-without-building \
          -project tests/business-critical-integration/IntegrationTests.xcodeproj \
          -scheme IntegrationTests \
          -sdk iphonesimulator \
          -destination "id=$SIMULATOR_UUID" \
          -testPlan PushBackgroundTestPlan \
          -derivedDataPath "${{ inputs.derived_data_path }}" \
          -resultBundlePath ./test-results-push-background.xcresult \
          -enableCodeCoverage NO \
          -quiet

    - name: Generate Test Reports
      if: always()
      run: |
        echo "📋 Generating comprehensive test reports..."
        
        mkdir -p test-reports/push
        
        # Extract test results from each test run
        for result_bundle in ./test-results-*.xcresult; do
          if [ -f "$result_bundle" ]; then
            bundle_name=$(basename "$result_bundle" .xcresult)
            xcrun xcresulttool get --format json --path "$result_bundle" > "test-reports/push/${bundle_name}.json"
            
            # Extract summary information
            echo "Results from $bundle_name:" >> test-reports/push/summary.txt
            xcrun xcresulttool get --format json --path "$result_bundle" | \
              jq -r '.actions[0].actionResult.status' >> test-reports/push/summary.txt
            echo "" >> test-reports/push/summary.txt
          fi
        done
        
        # Create final summary
        cat > test-reports/push/final-summary.json << EOF
        {
          "test_suite": "push-notifications",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "environment": {
            "simulator_uuid": "$SIMULATOR_UUID",
            "project_id": "$TEST_PROJECT_ID",
            "user_email": "$TEST_USER_EMAIL"
          },
          "status": "completed"
        }
        EOF

    - name: Capture Final Screenshots
      if: always()
      run: |
        echo "📸 Capturing final state screenshots..."
        
        mkdir -p test-reports/push/screenshots
        
        # Capture current app state
        xcrun simctl io $SIMULATOR_UUID screenshot test-reports/push/screenshots/final-app-state.png
        
        # List all applications on simulator
        xcrun simctl listapps $SIMULATOR_UUID > test-reports/push/simulator-apps.txt

    - name: Cleanup Test Data
      if: always()
      run: |
        echo "🧹 Cleaning up test data..."
        
        # Remove test user events from backend
        python3 - << 'EOF'
        import json
        import requests
        import os
        
        # Load configuration
        with open('/tmp/api-config.json', 'r') as f:
            config = json.load(f)
        
        headers = {
            'Api-Key': config['apiKey'],
            'Content-Type': 'application/json'
        }
        
        try:
            # Delete test user data
            response = requests.post(
                f"{config['baseUrl']}/api/users/delete",
                headers=headers,
                json={'email': config['userEmail']},
                timeout=30
            )
            
            if response.status_code in [200, 404]:
                print("✅ Test user data cleaned up")
            else:
                print(f"⚠️ Cleanup warning: {response.status_code}")
                
        except Exception as e:
            print(f"⚠️ Cleanup warning: {str(e)}")
        EOF
        
        # Reset simulator notification permissions
        xcrun simctl privacy $SIMULATOR_UUID reset notifications || true
        
        # Remove keychain
        security delete-keychain push-test-keychain || true
        
        # Clean up temporary files
        rm -f /tmp/api-config.json

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: push-notification-detailed-results
        path: |
          test-reports/push/
          ./test-results-*.xcresult
        retention-days: 7

    - name: Validate Test Success
      run: |
        echo "🎯 Validating overall test success..."
        
        # Check if all critical test files exist
        required_files=(
          "test-reports/push/final-summary.json"
          "test-reports/push/summary.txt"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required test output missing: $file"
            exit 1
          fi
        done
        
        echo "✅ Push notification integration tests completed successfully"